---
import navData from "@data/navData.json";
import { Icon } from "astro-icon/components";
import ToggleMenu from "@components/ToggleMenu.astro";
import DarkModeToggle from "@components/DarkModeToggle.astro";
---

<header id="site-header">
  <div class="flex justify-center items-center gap-10 text-center">
    <!--Nav Logo-->
    <a href="/" aria-label="back to home" class="max-md:hidden">
      <img
        src="/assets/svgs/logo-black.svg"
        alt=""
        width="210"
        height="29"
        aria-hidden="true"
        decoding="async"
      />
    </a>
    <!--Navigation List-->
    <nav class="flex" role="navigation">
      <!--Mobile Nav Toggle-->
      <ToggleMenu />
      <div class="flex">
        <ul id="expanded-ul" class="flex gap-3 list-none">
          {
            navData.map((entry) => (
              <li
                class:list={[
                  "cs-li",
                  { "cs-dropdown": entry.children?.length > 0 },
                ]}
              >
                {entry.children?.length > 0 ? (
                  // If entry has children in navData.json, create a button and a dropdown icon
                  <button
                    aria-expanded="false"
                    aria-controls={`submenu-${entry.key}`}
                    class:list={[
                      "underline",
                      { "no-underline font-bold": Astro.url.pathname.includes(entry.url) },
                    ]}
                  >
                    {entry.key}
                    <Icon name="mdi--caret" />
                  </button>
                ) : (
                  // If entry does not have children in navData.json, create an anchor
                  <a
                    href={entry.url}
                    class:list={[
                      "underline",
                      { "no-underline font-bold": Astro.url.pathname === entry.url },
                    ]}
                    aria-current={
                      Astro.url.pathname === entry.url ? "page" : undefined
                    }
                  >
                    {entry.key}
                  </a>
                )}

                {entry.children?.length > 0 && (
                  // If entry has children in navData.json, create a drop down menu
                  <ul id={`submenu-${entry.key}`}>
                    {entry.children.map((child: { url: string; key: string }) => (
                      <li>
                        <a
                          href={child.url}
                          aria-current={
                            Astro.url.pathname === child.url
                              ? "page"
                              : undefined
                          }
                        >
                          {child.key}
                        </a>
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))
          }
        </ul>
      </div>
    </nav>
    <a href="/contact" class="max-sm:hidden button">Contact Us</a>
    <!--Dark Mode toggle: remove component if you don't want to enable a dark mode toggle-->
    <DarkModeToggle />
  </div>
</header>